import os
import asyncio
import logging
import time
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.types import FSInputFile, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.dispatcher.middlewares.base import BaseMiddleware
from aiogram.dispatcher.event.bases import CancelHandler

from transcribe import transcribe_audio
from structure_yandex import structure_text
from save_results import save_to_files

# --- –ò–º–ø–æ—Ä—Ç —Ä–∞–±–æ—Ç—ã —Å –ë–î ---
from crud import save_intake, get_user_intakes, get_intake_by_id
from dotenv import load_dotenv
load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")

bot = Bot(token=API_TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

user_files = {}

PROCESSING_FRAMES = [
    "üêæ –û–±—Ä–∞–±–æ—Ç–∫–∞‚Ä¶",
    "üêï –ê–Ω–∞–ª–∏–∑‚Ä¶",
    "ü¶¥ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É—é —Ç–µ–∫—Å—Ç‚Ä¶",
    "üêà –§–æ—Ä–º–∏—Ä—É—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç‚Ä¶"
]
ANIMATION_DELAY = 0.14

# ------------------- Middleware -------------------
class LoggingMiddleware(BaseMiddleware):
    async def __call__(self, handler, event, data):
        start_time = time.time()
        try:
            response = await handler(event, data)
            elapsed = time.time() - start_time
            logging.info(
                f"User: {getattr(event.from_user, 'id', '-')}, "
                f"Type: {type(event).__name__}, "
                f"Time: {elapsed:.2f}s"
            )
            return response
        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ!")
            if hasattr(event, "answer"):
                await event.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            raise CancelHandler()  # –æ—Ç–º–µ–Ω—è–µ—Ç –¥–∞–ª—å–Ω–µ–π—à–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏

dp.message.middleware(LoggingMiddleware())
dp.callback_query.middleware(LoggingMiddleware())
# --------------------------------------------------

@router.message(F.text == "/start")
async def handle_start(message: types.Message):
    await message.answer(
        "<b>üêæ VeteraAI ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω–æ–≥–æ –ø—Ä–∏—ë–º–∞</b>\n\n"
        "1Ô∏è‚É£ –ü—Ä–æ—Å—Ç–æ <b>–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ</b> —Å –∑–∞–ø–∏—Å—å—é –ø—Ä–∏—ë–º–∞.\n"
        "2Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º:\n"
        "‚ÄÉ‚Ä¢ –ñ–∞–ª–æ–±—ã\n"
        "‚ÄÉ‚Ä¢ –ê–Ω–∞–º–Ω–µ–∑\n"
        "‚ÄÉ‚Ä¢ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –¥–∏–∞–≥–Ω–æ–∑\n"
        "‚ÄÉ‚Ä¢ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è\n"
        "‚ÄÉ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n"
        "ü§ñ <b>AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å–∞–º –≤—ã–±–∏—Ä–∞–µ—Ç —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ –∏–∑ –≤–∞—à–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞</b> ‚Äî –≤–∞–º –Ω–µ –Ω—É–∂–Ω–æ –≤—Ä—É—á–Ω—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—Ä–∞–∑—ã!\n\n"
        "üÜï <b>–ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞:</b>\n"
        "<b>/history</b> ‚Äî –ø–æ–∫–∞–∂–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ ¬´–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é¬ª –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª—É—á–∞—è.\n\n"
        "üìã –ú–æ–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å .txt / .docx —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞!\n\n"
        "üöÄ <i>–≠–∫–æ–Ω–æ–º—å—Ç–µ –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–∞—Ä—Ç ‚Äî —Ñ–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞—Ö!</i>",
        parse_mode="HTML"
    )

@router.message(F.voice)
async def handle_voice(message: types.Message):
    processing_msg = await message.answer(PROCESSING_FRAMES[0])

    async def animate_processing():
        idx = 0
        while True:
            await asyncio.sleep(ANIMATION_DELAY)
            try:
                await processing_msg.edit_text(PROCESSING_FRAMES[idx % len(PROCESSING_FRAMES)])
                idx += 1
            except Exception:
                break

    anim_task = asyncio.create_task(animate_processing())

    try:
        voice_file = await bot.get_file(message.voice.file_id)
        voice_path = f"voice_{message.message_id}.ogg"
        await bot.download_file(voice_file.file_path, voice_path)

        mp3_path = voice_path.replace(".ogg", ".mp3")
        os.system(f"ffmpeg -i {voice_path} {mp3_path}")

        transcribed_text = transcribe_audio(mp3_path)

        prompt = (
            "–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã–π –≤—Ä–∞—á –≤ —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –∫–ª–∏–Ω–∏–∫–µ. –ü–∞—Ü–∏–µ–Ω—Ç —É–∂–µ –Ω–∞ –ø—Ä–∏—ë–º–µ –∏ –æ—Å–º–æ—Ç—Ä–µ–Ω, –¥–∏–∞–≥–Ω–æ–∑ —Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ—Ç—Å—è –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –æ—Å–º–æ—Ç—Ä–∞ –∏ –¥–∏–∞–ª–æ–≥–∞.\n"
            "–¢–µ–±–µ –Ω—É–∂–Ω–æ:\n"
            "1. –ò–∑–≤–ª–µ—á—å —Ç–æ–ª—å–∫–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ '–ñ–∞–ª–æ–±—ã' –∏ '–ê–Ω–∞–º–Ω–µ–∑' –∏–∑ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞.\n"
            "2. –°—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –¥–∏–∞–≥–Ω–æ–∑ ('–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –¥–∏–∞–≥–Ω–æ–∑').\n"
            "3. –í —Ä–∞–∑–¥–µ–ª–µ '–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è' ‚Äî –æ—Ç–≤–µ—á–∞—Ç—å –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞, —É–∫–∞–∑—ã–≤–∞—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã (—Ç–æ—Ä–≥–æ–≤—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ), –∫–æ—Ç–æ—Ä—ã–µ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –†–æ—Å—Å–∏–∏, –∞ —Ç–∞–∫–∂–µ –∑–∞—Ä—É–±–µ–∂–Ω—ã–µ –∞–Ω–∞–ª–æ–≥–∏, –µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ñ—Ä–∞–∑—ã ¬´–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –æ—Å–º–æ—Ç—Ä¬ª –∏–ª–∏ ¬´—Ç–æ—á–Ω—É—é –¥–æ–∑–∏—Ä–æ–≤–∫—É –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤—Ä–∞—á¬ª ‚Äî —Ç—ã —Å–∞–º —É–∂–µ –≤—Ä–∞—á, –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ç–∞–∫, –∫–∞–∫ –±—É–¥—Ç–æ –≤–µ–¥—ë—à—å –ø—Ä–∏—ë–º –ª–∏—á–Ω–æ. –£–∫–∞–∑—ã–≤–∞–π –ø—Ä–∏–º–µ—Ä–Ω—É—é –¥–æ–∑–∏—Ä–æ–≤–∫—É, –µ—Å–ª–∏ —ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç, –Ω–∞–ø–∏—à–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ, –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –µ—â—ë –Ω—É–∂–Ω—ã.\n"
            "4. –í '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö' ‚Äî —Å–æ–≤–µ—Ç—ã –ø–æ —É—Ö–æ–¥—É, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É, –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–µ, –Ω–∞–±–ª—é–¥–µ–Ω–∏—é –∏ –¥–∞–ª—å–Ω–µ–π—à–∏–º –¥–µ–π—Å—Ç–≤–∏—è–º.\n"
            "–ü—Ä–∏–º–µ—Ä –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞:\n"
            "4. –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: –ü—Ä–æ–º—ã–≤–∞–Ω–∏–µ —É—à–µ–π —Ä–∞—Å—Ç–≤–æ—Ä–æ–º –û—Ç–æ—Ñ–µ—Ä–æ–Ω–æ–ª –ø–æ 3 –∫–∞–ø–ª–∏ 2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å 7 –¥–Ω–µ–π. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–Ω—Ç–∏–±–∏–æ—Ç–∏–∫ –°–∏–Ω—É–ª–æ–∫—Å 50 –º–≥ 2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å 7 –¥–Ω–µ–π. –ü—Ä–∏ —É—Ö—É–¥—à–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è ‚Äî –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è.\n"
            "–°—Ç—Ä–æ–≥–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–∞–∫:\n"
            "1. –ñ–∞–ª–æ–±—ã: ...\n"
            "2. –ê–Ω–∞–º–Ω–µ–∑: ...\n"
            "3. –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –¥–∏–∞–≥–Ω–æ–∑: ...\n"
            "4. –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: ...\n"
            "5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: ...\n\n"
            "–¢–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞:\n" + transcribed_text
        )

        data = structure_text(prompt)
        structured_text = data.get("result", {}).get("alternatives", [{}])[0].get("message", {}).get("text", "–û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ")

        txt_path, docx_path = save_to_files(structured_text)
        user_files[message.from_user.id] = {"txt": txt_path, "docx": docx_path}

        # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î! ---
        await save_intake(
            message.from_user.id,
            structured_text,
            txt_path,
            docx_path
        )
        # -----------------------

        anim_task.cancel()
        try:
            await processing_msg.edit_text("‚úÖ <b>–ì–æ—Ç–æ–≤–æ! –í–æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:</b>", parse_mode="HTML")
        except:
            pass

        await message.answer(
            "üìù <b>–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏—ë–º–∞:</b>\n\n" + structured_text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üìÑ .txt", callback_data="download_txt"),
                    InlineKeyboardButton(text="üóÇ .docx", callback_data="download_docx")
                ]
            ])
        )

    except Exception as e:
        anim_task.cancel()
        await processing_msg.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")

    finally:
        try:
            if os.path.exists(voice_path):
                os.remove(voice_path)
            if os.path.exists(mp3_path):
                os.remove(mp3_path)
        except Exception:
            pass

# ---------- –ù–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª: –∏—Å—Ç–æ—Ä–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ ----------
@router.message(F.text == "/history")
async def handle_history(message: types.Message):
    intakes = await get_user_intakes(message.from_user.id)
    if not intakes:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–æ–≤.")
        return

    response = "<b>–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤:</b>\n\n"
    keyboard = []
    for i, intake in enumerate(intakes[-10:], 1):
        # –ö—Ä–∞—Ç–∫–∞—è –∑–∞–ø–∏—Å—å –∏ –∫–Ω–æ–ø–∫–∞ "–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é"
        text = f"{i}. {intake.created_at.strftime('%d.%m.%Y %H:%M')}\n<code>{intake.result_text[:80]}...</code>"
        keyboard.append(
            [InlineKeyboardButton(text=f"–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é {i}", callback_data=f"show_{intake.id}")]
        )
        response += f"{text}\n\n"
    await message.answer(response, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))

@router.callback_query(lambda c: c.data.startswith("show_"))
async def show_full_analysis(callback: types.CallbackQuery):
    intake_id = int(callback.data.split("_")[1])
    intake = await get_intake_by_id(intake_id)
    if not intake:
        await callback.message.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    await callback.message.answer(
        f"<b>–ê–Ω–∞–ª–∏–∑ –æ—Ç {intake.created_at.strftime('%d.%m.%Y %H:%M')}</b>\n\n"
        f"{intake.result_text}", parse_mode="HTML"
    )

# -----------------------------------------------------------

@router.callback_query(F.data == "download_txt")
async def handle_download_txt(callback: types.CallbackQuery):
    paths = user_files.get(callback.from_user.id)
    if paths and os.path.exists(paths["txt"]):
        await callback.message.answer_document(FSInputFile(paths["txt"]))
    else:
        await callback.message.answer("‚õîÔ∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

@router.callback_query(F.data == "download_docx")
async def handle_download_docx(callback: types.CallbackQuery):
    paths = user_files.get(callback.from_user.id)
    if paths and os.path.exists(paths["docx"]):
        await callback.message.answer_document(FSInputFile(paths["docx"]))
    else:
        await callback.message.answer("‚õîÔ∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

if __name__ == "__main__":
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª –∏ –∫–æ–Ω—Å–æ–ª—å
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s | %(levelname)s | %(message)s",
        handlers=[
            logging.FileHandler("bot.log", encoding="utf-8"),
            logging.StreamHandler()
        ]
    )
    async def main():
        await dp.start_polling(bot)
    asyncio.run(main())
